apply from: 'dependencies.gradle'
apply from: 'checkstyle.gradle'

buildscript {
    apply from: 'dependencies.gradle'

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.3'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.21.0'
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.19.0'
        classpath 'gradle.plugin.org.codehaus.groovy:groovy-android-gradle-plugin:3.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
    }

    buildscript {
        repositories {
            gradlePluginPortal()
            google()
            mavenCentral()
        }
    }

    configurations {
        doclava
    }

    dependencies {
        doclava 'com.google.doclava:doclava:1.0.6'
    }

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }

        tasks.withType(Test) {
            useJUnitPlatform()
            testLogging {
                exceptionFormat "full"
                events "started", "skipped", "passed", "failed"
                showStandardStreams true
            }
        }
    }

    afterEvaluate {
        if (getPlugins().hasPlugin('com.vanniktech.maven.publish')) {
            publishing {
                repositories {
                    maven {
                        def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                        url = VERSION_NAME.contains("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

                        credentials(PasswordCredentials) {
                            username = property('SONATYPE_NEXUS_USERNAME')
                            password = property('SONATYPE_NEXUS_PASSWORD')
                        }
                    }
                }
            }
        }
    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}
