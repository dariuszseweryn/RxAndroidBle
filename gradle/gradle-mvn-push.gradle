/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
    return !VERSION_NAME.endsWith("SNAPSHOT")
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? property('SONATYPE_NEXUS_USERNAME') : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? property('SONATYPE_NEXUS_PASSWORD') : ""
}

def getPgpSigningKey() {
    return System.getenv("PGP_SIGNING_KEY") != null ? System.getenv("PGP_SIGNING_KEY") :
            hasProperty('PGP_SIGNING_KEY') ? property('PGP_SIGNING_KEY') : ""
}

def getPgpSigningPassword() {
    return System.getenv("PGP_SIGNING_PASSWORD") != null ? System.getenv("PGP_SIGNING_PASSWORD") :
            hasProperty('PGP_SIGNING_PASSWORD') ? property('PGP_SIGNING_PASSWORD') : ""
}

def isAndroidProject() {
    return project.getPlugins().hasPlugin('com.android.application') || project.getPlugins().hasPlugin('com.android.library')
}

afterEvaluate { project ->
    if(!isAndroidProject()) {
        return
    }
    publishing {
        repositories {
            maven {
                url = uri(isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl())
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }
        publications {
            release(MavenPublication) {
                afterEvaluate {
                    from components.release
                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = VERSION_NAME
                    pom {
                        name = POM_NAME
                        description = POM_DESCRIPTION
                        url = POM_URL
                        packaging = POM_PACKAGING
                        licenses {
                            license {
                                name = POM_LICENCE_NAME
                                url = POM_LICENCE_URL
                                distribution = POM_LICENCE_DIST
                            }
                        }
                        developers {
                            developer {
                                id = POM_DEVELOPER_ID
                                name = POM_DEVELOPER_NAME
                            }
                            developer {
                                id = POM_DEVELOPER_ID2
                                name = POM_DEVELOPER_NAME2
                            }
                        }
                        scm {
                            url = POM_SCM_URL
                            connection = POM_SCM_CONNECTION
                            developerConnection = POM_SCM_DEV_CONNECTION
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        useInMemoryPgpKeys(getPgpSigningKey(), getPgpSigningPassword())
        sign(publishing.publications.release)
    }

    task androidJavadocs(type: Javadoc) {
        def releaseVariant = android.libraryVariants.matching { variant -> variant.name == "release" }.iterator().next()
        source = android.sourceSets.main.java.source
        if(project.name.contains("mock")) {
            classpath += files(releaseVariant.javaCompileProvider.get().classpath.filter { f -> !f.getName().contains("shadow") })
        } else {
            classpath += files(releaseVariant.javaCompileProvider.get().classpath)
        }
        classpath += project.files(
                project.android.getBootClasspath().join(File.pathSeparator),
                files("$buildDir/intermediates/classes/release")
        )
        title = null
        options.noTimestamp(false)
        options.doclet = "com.google.doclava.Doclava"
        options.docletpath = configurations.doclava.files.asType(List)
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        archiveClassifier.set('javadoc')
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.source
    }

    artifacts {
        archives androidJavadocsJar
        archives androidSourcesJar
    }

}